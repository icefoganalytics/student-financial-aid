import express, { Request, Response } from "express";
import cors from "cors";
import path from "path";
import helmet from "helmet";
import fileUpload from "express-fileupload";
import { auth } from "express-openid-connect";
import * as ExpressSession from "express-session";
import {
  API_PORT,
  FRONTEND_URL,
  APPLICATION_NAME,
  AUTH_DOMAIN,
  AUTH_CLIENT,
  AUTH_SECRET,
  AUTH_CLIENTSECRET,
  AUTH_REDIRECT,
  SENTRY_DSN,
} from "./config";
import { doHealthCheck } from "./utils/health-check";
import { authRouter, portalRouter, userRouter } from "./routes";

import * as Sentry from "@sentry/node";
if (SENTRY_DSN.length > 0) Sentry.init({ dsn: SENTRY_DSN });

const app = express();
app.use(express.json({ limit: "25mb" })); // for parsing application/json
app.use(express.urlencoded({ extended: true, limit: "25mb" })); // for parsing application/x-www-form-urlencoded
app.use(fileUpload({ limits: { fileSize: 25000000 } })); // 25mb
app.use(
  helmet.contentSecurityPolicy({
    directives: {
      "default-src": ["'self'", `${AUTH_DOMAIN}`],
      "base-uri": ["'self'"],
      "block-all-mixed-content": [],
      "font-src": ["'self'", "https:", "data:"],
      "frame-ancestors": ["'self'"],
      "img-src": ["'self'", "data:"],
      "object-src": ["'none'"],
      "script-src": ["'self'", "'unsafe-eval'"],
      "script-src-attr": ["'none'"],
      "style-src": ["'self'", "https:", "'unsafe-inline'"],
    },
  })
);

app.use(
  ExpressSession.default({
    secret: "supersecret",
    resave: true,
    saveUninitialized: true,
    cookie: { secure: false },
  })
);

app.use(
  auth({
    issuerBaseURL: AUTH_DOMAIN,
    baseURL: AUTH_REDIRECT,
    clientID: AUTH_CLIENT,
    secret: AUTH_SECRET,
    idpLogout: true,
    authRequired: false,
    session: { cookie: { secure: false } },

    authorizationParams: {
      response_type: "code",
      response_mode: "form_post",
      scope: "openid profile email",
    },
    clientSecret: AUTH_CLIENTSECRET,
    clientAuthMethod: "client_secret_post",

    routes: {
      callback: "/auth/callback",
    },
  })
);

// very basic CORS setup
app.use(
  cors({
    origin: FRONTEND_URL,
    optionsSuccessStatus: 200,
    credentials: true,
  })
);

app.get("/api/healthCheck", (req: Request, res: Response) => {
  // app.get("/api/healthCheck",  (req: Request, res: Response) => {
  doHealthCheck(req, res);
});

app.use("/auth", authRouter);
app.use("/api/user", userRouter);
app.use("/api/portal", portalRouter);

// serves the static files generated by the front-end
app.use(express.static(path.join(__dirname, "web")));

// if no other routes match, just send the front-end
app.use((req: Request, res: Response) => {
  console.log(`Request to ${req.path} served by sendFile`);
  res.sendFile(path.join(__dirname, "web") + "/index.html");
});

const PORT: number = parseInt(API_PORT as string);

app.listen(PORT, async () => {
  console.log(`${APPLICATION_NAME} API listenting on port ${PORT}`);
});
